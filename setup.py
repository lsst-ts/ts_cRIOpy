import sys
import pathlib
import setuptools

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

install_requires = [
    "numpy",
    "astropy",
    "ts-salobj",
    "PySide2",
    "asyncqt",
]
tests_require = install_requires + [
    "pytest",
    "pytest-cov",
    "pytest-flake8",
]
dev_requires = tests_require + ["documenteer[pipelines]"]
scm_version_template = """# Generated by setuptools_scm
__all__ = ["__version__"]

__version__ = "{version}"
"""

tools_path = pathlib.Path(setuptools.__path__[0])
base_prefix = pathlib.Path(sys.base_prefix)


def local_scheme(version):
    return ""


setuptools.setup(
    name="ts_criopy",
    description="GUIs, Python packages and utilities for NI cRIO.",
    long_description=long_description,
    long_description_content_type="text/markdown",
    use_scm_version={
        "write_to": "python/lsst/ts/cRIOpy/version.py",
        "write_to_template": scm_version_template,
        "local_scheme": local_scheme,
    },
    setup_requires=["setuptools_scm", "pytest-runner"],
    install_requires=install_requires,
    package_dir={"": "python"},
    packages=setuptools.find_namespace_packages(where="python"),
    package_data={"": ["*.rst", "*.yaml"]},
    python_requires=">=3.8",
    scripts=["bin/M1M3GUI", "bin/M1M3TSGUI", "bin/VMSGUI", "bin/VMSlogger"],
    tests_require=tests_require,
    extras_require={"dev": dev_requires},
    license="GPL3",
    project_urls={
        "Bug Tracker": "https://jira.lsstcorp.org/secure/Dashboard.jspa",
        "Source Code": "https://github.com/lsst-ts/ts_cRIOpy",
    },
)
