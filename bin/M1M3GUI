#!/usr/bin/env python3.8
# -'''- coding: utf-8 -'''-

import signal
import sys
import time

from lsst.ts.cRIOpy.GUI import (
    ApplicationControlWidget,
    ActuatorOverviewPageWidget,
    AirPageWidget,
    CellLightPageWidget,
    DCAccelerometerPageWidget,
    ForceActuatorGraphPageWidget,
    ForceActuatorValuePageWidget,
    ForceBalanceSystemPageWidget,
    ForceActuatorBumpTestPageWidget,
    GyroPageWidget,
    HardpointsWidget,
    IMSPageWidget,
    InclinometerPageWidget,
    InterlockPageWidget,
    OffsetsWidget,
    OverviewPageWidget,
    PIDPageWidget,
    PowerPageWidget,
    SALLog,
    SALErrorCodeWidget,
    SplashScreen,
)

from lsst.ts.cRIOpy.GUI import SALComm, SALStatusBar

from lsst.ts.cRIOpy.GUI.M1M3GUI import detailedStateString

from PySide2.QtCore import QSettings, Slot
from PySide2.QtWidgets import (
    QApplication,
    QWidget,
    QVBoxLayout,
    QMainWindow,
    QHBoxLayout,
    QLabel,
    QListWidget,
    QTabWidget,
    QGroupBox,
)
from PySide2.QtGui import QFont

from asyncqt import QEventLoop, asyncClose
import asyncio


class EUI(QMainWindow):
    def __init__(self, m1m3, mtmount):
        super().__init__()
        self.m1m3 = m1m3
        self.mtmount = mtmount

        controlWidget = QGroupBox("Application Control")
        applicationControl = ApplicationControlWidget(self.m1m3)
        applicationControlLayout = QVBoxLayout()
        applicationControlLayout.addWidget(applicationControl)
        controlWidget.setLayout(applicationControlLayout)

        self.applicationPagination = QListWidget()
        self.applicationPagination.currentRowChanged.connect(self.changePage)

        self.tabWidget = QTabWidget()
        self.tabWidget.tabBar().hide()

        self.addPage("Overview", OverviewPageWidget(self.m1m3, self.mtmount))
        self.addPage("Actuator Overview", ActuatorOverviewPageWidget(self.m1m3))
        self.addPage("Hardpoints", HardpointsWidget(self.m1m3))
        self.addPage("Offsets", OffsetsWidget(self.m1m3))
        self.addPage("DC Accelerometers", DCAccelerometerPageWidget(self.m1m3))
        self.addPage("Gyro", GyroPageWidget(self.m1m3))
        self.addPage("IMS", IMSPageWidget(self.m1m3))
        self.addPage("Inclinometer", InclinometerPageWidget(self.m1m3))
        self.addPage("Interlock", InterlockPageWidget(self.m1m3))
        self.addPage("Lights", CellLightPageWidget(self.m1m3))
        self.addPage("Air", AirPageWidget(self.m1m3))
        self.addPage("Power", PowerPageWidget(self.m1m3))
        self.addPage("PID", PIDPageWidget(self.m1m3))
        self.addPage("Force Balance System", ForceBalanceSystemPageWidget(self.m1m3))
        self.addPage(
            "Force Actuator Bump Test", ForceActuatorBumpTestPageWidget(self.m1m3)
        )
        self.addPage("Force Actuator Graph", ForceActuatorGraphPageWidget(self.m1m3))
        self.addPage("Force Actuator Value", ForceActuatorValuePageWidget(self.m1m3))
        self.addPage("SAL Log", SALLog.Widget(self.m1m3))
        self.addPage("SAL Errors", SALErrorCodeWidget(self.m1m3))

        self.applicationPagination.setCurrentRow(0)

        leftLayout = QVBoxLayout()
        leftLayout.addWidget(controlWidget)
        leftLayout.addWidget(self.applicationPagination)

        layout = QHBoxLayout()
        layout.addLayout(leftLayout)
        layout.addWidget(self.tabWidget)

        m1m3Widget = QWidget()
        m1m3Widget.setLayout(layout)

        self.setCentralWidget(m1m3Widget)
        self.setStatusBar(SALStatusBar([self.m1m3, self.mtmount], detailedStateString))

        self.setMinimumSize(700, 400)

        settings = QSettings("LSST.TS", "M1M3GUI")
        try:
            self.restoreGeometry(settings.value("geometry"))
            self.restoreState(settings.value("windowState"))
        except AttributeError:
            self.resize(1000, 700)

    def addPage(self, name, widget):
        self.applicationPagination.addItem(name)
        self.tabWidget.addTab(widget, name)

    @Slot(int)
    def changePage(self, row):
        if row < 0:
            return
        self.tabWidget.setCurrentIndex(row)

    @asyncClose
    async def closeEvent(self, event):
        settings = QSettings("LSST.TS", "M1M3GUI")
        settings.setValue("geometry", self.saveGeometry())
        settings.setValue("windowState", self.saveState())
        await asyncio.gather(self.m1m3.close(), self.mtmount.close())
        super().closeEvent(event)


eui = None


class M1M3Splash(SplashScreen):
    def started(self, m1m3, mtmount):
        global eui
        eui = EUI(m1m3, mtmount)
        self.finish(eui)
        eui.show()


if __name__ == "__main__":
    # Create the Qt Application
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    splash = M1M3Splash(
        SALComm.create("MTM1M3"),
        SALComm.create("MTMount", include=["azimuth", "elevation", "heartbeat"]),
    )
    splash.show()

    def handler(signum, frame):
        print(f"Catching signal {signum}, exiting")
        loop.call_soon(splash.stop)
        loop.call_soon(app.closeAllWindows)

    for signum in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]:
        signal.signal(signum, handler)

    # Run the main Qt loop
    with loop:
        loop.run_forever()

    # Close application
    sys.exit()
